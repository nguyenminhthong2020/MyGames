using MyGames.Desktop.Models;

namespace MyGames.Desktop.Services
{
    public class AccuracyTracker
    {
        private readonly List<double> _centipawnLossWhite = new();
        private readonly List<double> _centipawnLossBlack = new();

        // --- Bảng tham chiếu tương đương chess.com ---
        // cpLoss (centipawn) -> Accuracy (%)
        private static readonly (double cp, double acc)[] ReferenceTable =
        {
            (0, 100), (5, 99.9), (10, 99.8), (15, 99.7), (20, 99.6), (25, 99.5), (30, 99.4), (35, 99.3), (40, 99.2), 
            (45, 99.1), (50, 99.0), (55, 98.9), (60, 98.8), (65, 98.7), (70, 98.6), (75, 98.5), (80, 98.4), (85, 98.3), 
            (90, 98.2), (95, 98.1), (100, 98.0), (110, 97.75), (120, 97.5), (130, 97.25), (140, 97.0), (150, 96.75), 
            (160, 96.5), (170, 96.25), (180, 96.0), (190, 95.75), (200, 95.5), (210, 95.25), (220, 95.0), 
            (230, 94.75), (240, 94.5), (250, 94.25), (260, 94.0), (270, 93.75), (280, 93.5), (290, 93.25), 
            (300, 93.0), (310, 92.75), (320, 92.5), (330, 92.25), (340, 92.0), (350, 91.75), (360, 91.5), 
            (370, 91.25), (380, 91.0), (390, 90.75), (400, 90.5), (410, 90.25), (420, 90.0), (430, 89.75), 
            (440, 89.5), (450, 89.25), (460, 89.0), (470, 88.75), (480, 88.5), (490, 88.25), (500, 88.0), 
            (510, 87.75), (520, 87.5), (530, 87.25), (540, 87.0), (550, 86.75), (560, 86.5), (570, 86.25), 
            (580, 86.0), (590, 85.75), (600, 85.5), (610, 85.25), (620, 85.0), (630, 84.75), (640, 84.5), 
            (650, 84.25), (660, 84.0), (670, 83.75), (680, 83.5), (690, 83.25), (700, 83.0), (710, 82.75), 
            (720, 82.5), (730, 82.25), (740, 82.0), (750, 81.75), (760, 81.5), (770, 81.25), (780, 81.0), 
            (790, 80.75), (800, 80.5), (810, 80.25), (820, 80.0), (830, 79.75), (840, 79.5), (850, 79.25), 
            (860, 79.0), (870, 78.75), (880, 78.5), (890, 78.25), (900, 78.0), (910, 77.75), (920, 77.5), 
            (930, 77.25), (940, 77.0), (950, 76.75), (960, 76.5), (970, 76.25), (980, 76.0), (990, 75.75), 
            (1000, 75.5), (1010, 75.25), (1020, 75.0),
            (1030, 74.75), (1040, 74.5), (1050, 74.25), (1060, 74.0), (1070, 73.75), (1080, 73.5), (1090, 73.25), 
            (1100, 73.0), (1110, 72.75), (1120, 72.5), (1130, 72.25), (1140, 72.0), (1150, 71.75), (1160, 71.5), 
            (1170, 71.25), (1180, 71.0), (1190, 70.75), (1200, 70.5), (1210, 70.25), (1220, 70.0), (1230, 69.75), 
            (1240, 69.5), (1250, 69.25), (1260, 69.0), (1270, 68.75), (1280, 68.5), (1290, 68.25), (1300, 68.0), 
            (1310, 67.75), (1320, 67.5), (1330, 67.25), (1340, 67.0), (1350, 66.75), (1360, 66.5), (1370, 66.25), 
            (1380, 66.0), (1390, 65.75), (1400, 65.5), (1410, 65.25), (1420, 65.0), (1430, 64.75), (1440, 64.5), 
            (1450, 64.25), (1460, 64.0), (1470, 63.75), (1480, 63.5), (1490, 63.25), (1500, 63.0), (1510, 62.75), 
            (1520, 62.5), (1530, 62.25), (1540, 62.0), (1550, 61.75), (1560, 61.5), (1570, 61.25), (1580, 61.0), 
            (1590, 60.75), (1600, 60.5), (1610, 60.25), (1620, 60.0), (1630, 59.75), (1640, 59.5), (1650, 59.25), 
            (1660, 59.0), (1670, 58.75), (1680, 58.5), (1690, 58.25), (1700, 58.0), (1710, 57.75), (1720, 57.5), 
            (1730, 57.25), (1740, 57.0), (1750, 56.75), (1760, 56.5), (1770, 56.25), (1780, 56.0), (1790, 55.75), 
            (1800, 55.5), (1810, 55.25), (1820, 55.0), (1830, 54.75), (1840, 54.5), (1850, 54.25), (1860, 54.0), 
            (1870, 53.75), (1880, 53.5), (1890, 53.25), (1900, 53.0), (1910, 52.75), (1920, 52.5), (1930, 52.25), 
            (1940, 52.0), (1950, 51.75), (1960, 51.5), (1970, 51.25), (1980, 51.0), (1990, 50.5), (2000, 50.0), 
            (2010, 49.75), (2020, 49.5), (2030, 49.25), (2040, 49.0), (2050, 48.75), (2060, 48.5), (2070, 48.25), 
            (2080, 48.0), (2090, 47.75), (2100, 47.5), (2110, 47.25), (2120, 47.0), (2130, 46.75), (2140, 46.5), 
            (2150, 46.25), (2160, 46.0), (2170, 45.75), (2180, 45.5), (2190, 45.25), (2200, 45.0), (2210, 44.75), 
            (2220, 44.5), (2230, 44.25), (2240, 44.0), (2250, 43.75), (2260, 43.5), (2270, 43.25), (2280, 43.0), 
            (2290, 42.75), (2300, 42.5), (2310, 42.25), (2320, 42.0), (2330, 41.75), (2340, 41.5), (2350, 41.25), 
            (2360, 41.0), (2370, 40.75), (2380, 40.5), (2390, 40.25), (2400, 40.0),
            (2405, 39.75), (2410, 39.5), (2415, 39.25), (2420, 39.0), (2430, 38.75), (2440, 38.5), (2450, 38.25), 
            (2460, 38.0), (2470, 37.75), (2480, 37.5), (2490, 37.25), (2500, 37.0), (2510, 36.75), (2520, 36.5), 
            (2530, 36.25), (2540, 36.0), (2550, 35.75), (2560, 35.5), (2570, 35.25), (2580, 35.0), (2590, 34.75), 
            (2600, 34.5), (2610, 34.25), (2620, 34.0), (2630, 33.75), (2640, 33.5), (2650, 33.25), (2660, 33.0), 
            (2670, 32.75), (2680, 32.5), (2690, 32.25), (2700, 32.0), (2710, 31.75), (2720, 31.5), (2730, 31.25), 
            (2740, 31.0), (2750, 30.75), (2760, 30.5), (2770, 30.25), (2780, 30.0), (2790, 29.75), (2800, 29.5), 
            (2810, 29.25), (2820, 29.0), (2830, 28.75), (2840, 28.5), (2850, 28.25), (2860, 28.0), (2870, 27.75), 
            (2880, 27.5), (2890, 27.25), (2900, 27.0), (2910, 26.75), (2920, 26.5), (2930, 26.25), (2940, 26.0), 
            (2950, 25.75), (2960, 25.5), (2970, 25.25), (2980, 25.0), (2990, 24.75), (3000, 24.5), (3010, 24.25), 
            (3020, 24.0), (3030, 23.75), (3040, 23.5), (3050, 23.25), (3060, 23.0), (3070, 22.75), (3080, 22.5), 
            (3090, 22.25), (3100, 22.0), (3110, 21.75), (3120, 21.5), (3130, 21.25), (3140, 21.0), (3150, 20.75), 
            (3160, 20.5), (3170, 20.25), (3180, 20.0), (3190, 19.75), (3200, 19.5), (3210, 19.25), (3220, 19.0), 
            (3230, 18.75), (3240, 18.5), (3250, 18.25), (3260, 18.0), (3270, 17.75), (3280, 17.5), (3290, 17.25), 
            (3300, 17.0), (3310, 16.75), (3320, 16.5), (3330, 16.25), (3340, 16.0), (3350, 15.75), (3360, 15.5), 
            (3370, 15.25), (3380, 15.0), (3390, 14.75), (3400, 14.5), (3410, 14.25), (3420, 14.0), (3430, 13.75), 
            (3440, 13.5), (3450, 13.25), (3460, 13.0), (3470, 12.75), (3480, 12.5), (3490, 12.25), (3500, 12.0), 
            (3510, 11.75), (3520, 11.5), (3530, 11.25), (3540, 11.0), (3550, 10.75), (3560, 10.5), (3570, 10.25), 
            (3580, 10.0), (3590, 9.75), (3600, 9.5), (3610, 9.25), (3620, 9.0), (3630, 8.75), (3640, 8.5), 
            (3650, 8.25), (3660, 8.0), (3670, 7.75), (3680, 7.5), (3690, 7.25), (3700, 7.0), (3710, 6.75), 
            (3720, 6.5), (3730, 6.25), (3740, 6.0), (3750, 5.75), (3760, 5.5), (3770, 5.25), (3780, 5.0), 
            (3790, 4.75), (3800, 4.5), (3810, 4.25), (3820, 4.0), (3830, 3.75), (3840, 3.5), (3850, 3.25), 
            (3860, 3.0), (3870, 2.75), (3880, 2.5), (3890, 2.25), (3900, 2.0), (3910, 1.75), (3920, 1.5), 
            (3930, 1.25), (3940, 1.0), (3950, 0.75), (3960, 0.5), (3970, 0.4), (3980, 0.3), (3990, 0.15), (4000, 0)
        };

        // --- Hàm nội suy Accuracy từ bảng ---
        private double CpToAccuracy(double cp)
        {
            if (cp <= 0) return 100;
            if (cp >= ReferenceTable[^1].cp) return 0;

            for (int i = 1; i < ReferenceTable.Length; i++)
            {
                var (x1, y1) = ReferenceTable[i - 1];
                var (x2, y2) = ReferenceTable[i];

                if (cp <= x2)
                {
                    double t = (cp - x1) / (x2 - x1);
                    return Math.Round(y1 + t * (y2 - y1), 1);
                }
            }

            return 0;
        }

        // Thêm điểm centipawn loss sau mỗi nước cờ
        public void AddMove(string side, double centipawnLoss)
        {
            if (side.Equals("white", StringComparison.OrdinalIgnoreCase))
                _centipawnLossWhite.Add(centipawnLoss);
            else
                _centipawnLossBlack.Add(centipawnLoss);
        }

        // Quy đổi centipawn loss -> accuracy %, theo công thức xấp xỉ chess.com
        private double ConvertCpLossToAccuracy(double cpLoss)
        {
            if (cpLoss <= 10) return 100;  // Điểm cực tốt nếu sai số nhỏ.
            if (cpLoss >= 8000) return 0;  // Điểm thấp nhất nếu sai số rất lớn.

            // Tăng tính mượt cho sai số nhỏ (dưới 100 cp)
            if (cpLoss < 100)
            {
                // Công thức mượt: Giảm mượt độ chính xác cho các sai số nhỏ
                double acc = 103 - 3 * Math.Pow(Math.Log10(cpLoss + 10), 2) * 30;
                return Math.Clamp(acc, 0, 100);
            }
            // Đối với các sai số lớn hơn 100 cp, sử dụng sự giảm dần theo dạng phi tuyến
            else if (cpLoss < 1000)
            {
                return 103 - 3 * Math.Pow(Math.Log10(cpLoss + 100), 1.5) * 15;
            }
            // Công thức tuyến tính cho sai số lớn (từ 1000 cp trở lên)
            else
            {
                return 100 - (cpLoss - 1000) * 0.07;
            }
        }

        public double ConvertCpLossToAccuracy_New(double cpLoss)
        {
            // Kết hợp cả CpToAccuracy và ConvertCpLossToAccuracy, để lựa chọn cách tính hợp lý
            if (cpLoss < 50) // Sử dụng hàm mượt cho độ chính xác thấp
            {
                return ConvertCpLossToAccuracy(cpLoss);
            }
            else // Dùng bảng tham chiếu để tính toán cho độ chính xác cao
            {
                return CpToAccuracy(cpLoss);
            }
        }

        // Accuracy trung bình của mỗi bên
        public double GetAverageAccuracy(string side)
        {
            var list = side.Equals("white", StringComparison.OrdinalIgnoreCase)
                ? _centipawnLossWhite
                : _centipawnLossBlack;

            if (list.Count == 0) return 100;
            var accList = list.Select(ConvertCpLossToAccuracy_New);
            return Math.Round(accList.Average(), 1);
        }

        // Hiển thị dạng chuỗi
        public string GetSummary()
        {
            return $"White: {GetAverageAccuracy("white")}% | Black: {GetAverageAccuracy("black")}%";
        }

        public void Reset()
        {
            _centipawnLossWhite.Clear();
            _centipawnLossBlack.Clear();
        }

        #region Improve Accurancy
        public double CalculateAccuracyFromStockfish(double cpLoss, double evalBefore, double evalAfter, int numPieces)
        {
            double accuracy = ConvertCpLossToAccuracy_New(cpLoss);

            // Cộng điểm nếu nước đi cực gần best move
            if (cpLoss < 20)
                accuracy += 3;
            else if (cpLoss < 50)
                accuracy += 1;

            accuracy = AdjustForEndgame(accuracy, numPieces);
            return Math.Clamp(accuracy, 0, 100);
        }

        public double CalculateAccuracyFromPlayerMove(double cpLoss, double evalBefore, double evalAfter)
        {
            double accuracy = ConvertCpLossToAccuracy_New(cpLoss);

            if (cpLoss < 20)
                accuracy += 2;
            else if (cpLoss < 50)
                accuracy += 1;

            return Math.Clamp(accuracy, 0, 100);
        }

        public double AdjustForEndgame(double accuracy, int numPieces)
        {
            int remainingPieces = numPieces;

            if (remainingPieces <= 4) // Tàn cuộc
            {
                accuracy += (100 - accuracy) * 0.25;
            }
            else if (remainingPieces <= 8) // Cận tàn cuộc
            {
                accuracy += (100 - accuracy) * 0.15;
            }
            else if (remainingPieces <= 12) // Trung cuộc muộn
            {
                accuracy += (100 - accuracy) * 0.05;
            }
            // Trên 12 quân: không điều chỉnh

            return accuracy;
        }

        #endregion
    }
}
